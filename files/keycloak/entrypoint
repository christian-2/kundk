#!/bin/bash
set -e
trap 'echo "error: $0:$LINENO"' ERR

# check ENVs

echo "APACHE_HOSTNAME=$APACHE_HOSTNAME"
echo "APP_IDS=$APP_IDS"
echo "KEYCLOAK_ADMIN_PASSWORD=$(echo $KEYCLOAK_ADMIN_PASSWORD | sed s/./\*/g)"
echo "KEYCLOAK_EMAIL=$KEYCLOAK_EMAIL"
echo "KEYCLOAK_HOSTNAME=$KEYCLOAK_HOSTNAME"
echo "KEYCLOAK_LOG_LEVEL=$KEYCLOAK_LOG_LEVEL"
echo "KEYCLOAK_PORT=$KEYCLOAK_PORT"
echo "LDAP_SERVER=$LDAP_SERVER"
echo "POSTGRES_KEYCLOAK_PASSWORD=$(echo $POSTGRES_KEYCLOAK_PASSWORD | \
  sed s/./\*/g)"
echo "REALM_IDS=$REALM_IDS"
echo "SMTP_SERVER=$SMTP_SERVER"
echo "VSPHERE_DOMAIN=$VSPHERE_DOMAIN"
echo "VSPHERE_SERVER=$VSPHERE_SERVER"

. /usr/local/bin/issue_19321

[ -n "$APACHE_HOSTNAME" ] || APACHE_HOSTNAME=$(fqdn_19321)
[ -n "$APP_IDS" ] || APP_IDS="1 2 3 4 6"
[ -n "$KEYCLOAK_ADMIN_PASSWORD" ]
[ -n "$KEYCLOAK_EMAIL" ]
[ -n "$KEYCLOAK_HOSTNAME" ] || KEYCLOAK_HOSTNAME=$(fqdn_19321)
[ -n "$KEYCLOAK_LOG_LEVEL" ] || KEYCLOAK_LOG_LEVEL=info
[ -n "$KEYCLOAK_PORT" ] || KEYCLOAK_PORT=8444
[ -n "$POSTGRES_KEYCLOAK_PASSWORD" ]
[ -n "$REALM_IDS" ] || REALM_IDS="1 2 3 4 6"
[ -n "$KEYCLOAK_ADMIN_PASSWORD" ]
[ -n "$SMTP_SERVER" ]

# download blob.jwt, if necessary

if [ ! -f /mnt/state/blow.jwt ]; then
  curl -so /mnt/state/blob.jwt -L https://mds3.fidoalliance.org
fi

# wait for ACME certificate to have arrived

. /usr/local/bin/state

wait_state CERTIFICATES_READY /mnt/state/state.acme

install -m 644 \
  /mnt/state/${KEYCLOAK_HOSTNAME}_fullchain.cer \
  /opt/keycloak/conf/server.crt.pem
install -m 600 \
  /mnt/state/$KEYCLOAK_HOSTNAME.key \
  /opt/keycloak/conf/server.key.pem

# wait for database to be ready

wait_state DATABASE_READY /mnt/state/state.db \
  "pg_isready -h localhost -d keycloak -U keycloak -q"

# prepare Keycloak configuration file

[ -f /opt/keycloak/conf/keycloak.conf ]

sed -i \
  -e 's/^#\(db-password\)=.*$/\1='$POSTGRES_KEYCLOAK_PASSWORD'/' \
  -e 's/^#\(db-username\)=.*$/\1=keycloak/' \
  -e 's|^#\(db-url\)=.*$|\1=jdbc:postgres://localhost/keycloak|' \
  -e 's/^#\(hostname\)=.*$/\1='$KEYCLOAK_HOSTNAME'/' \
  -e 's|^#\(https-certificate-file\)=.*$|\1=/opt/keycloak/conf/server.crt.pem|' \
  -e 's|^#\(https-certificate-key-file\)=.*$|\1=/opt/keycloak/conf/server.key.pem|' \
  -e '$a\\' \
  -e '$ahttps-port='$KEYCLOAK_PORT \
  -e '$alog-level='$KEYCLOAK_LOG_LEVEL \
  /opt/keycloak/conf/keycloak.conf

# start Keycloak (as in original entrypoint)

PATH=$PATH:/opt/keycloak/bin

KEYCLOAK_ADMIN=admin kc.sh $@ &

while true; do
  echo "$(date +%H:%M:%S) waiting for Keycloak to start"

  if curl --head -fsS \
    https://$KEYCLOAK_HOSTNAME:$KEYCLOAK_PORT/health/ready &> /dev/null; then
    break
  fi

  sleep 1
done

# create session

kc-login
config=/var/run/keycloak/kcadm.config

# define helper functions

factory() {
  [ $# -eq 2 ]
  /factory $1 $2
}

createExecution() {
  [ $# -eq 4 ]
  id=$(kcadm.sh create --config $config -r $1 -i \
    authentication/flows/$2/executions/execution \
    -s provider=$3)
  kcadm.sh get --config $config -r $1 \
    authentication/flows/$2/executions |& \
    jq --arg id $id --arg requirement $4 \
      '.[] | select(.id == $id) | {"id":.id,"requirement":$requirement}' | \
    kcadm.sh update --config $config -r $1 \
      authentication/flows/$2/executions \
      -f -
}

createFlow() {
  [ $# -eq 2 ]
  kcadm.sh create --config $config -r $1 \
    authentication/flows \
    -s alias=$2 \
    -s builtIn=false \
    -s providerId=basic-flow \
    -s topLevel=true
}

createSubflow() {
  [ $# -eq 4 ]
  flowId=$(kcadm.sh create --config $config -r $1 -i \
    authentication/flows/$2/executions/flow \
    -s alias=$3 \
    -s type=basic-flow)
  kcadm.sh get --config $config -r $1 \
    authentication/flows/$2/executions |& \
    jq --arg flowId $flowId --arg requirement $4 \
    '.[] | select(.flowId == $flowId) |
      {"id":.id,"requirement":$requirement}' | \
      kcadm.sh update --config $config -r $1 \
        authentication/flows/$2/executions \
        -f -
}

store_client_secrets() {
  [ $# -eq 3 ]
  app_id=$1
  realm=$2
  client_id=$3

  echo "storing client secret for client $client_id"
  client_secret=$(kcadm.sh get --config $config -r $realm \
    clients |& \
    jq -r --arg clientId $client_id \
      '.[] | select(.clientId == $clientId) | .secret')
  [ -n "$client_secret" ]
  echo $client_secret > /mnt/state/demo-$app_id-client-secret
}

store_saml_idp_metadata() {
  [ $# -eq 3 ]
  app_id=$1
  realm=$2
  client_id=$3

  case $app_id in
  1|2|6)
    ;;
  3|4)
    idp_entity_id=https://$KEYCLOAK_HOSTNAME:$KEYCLOAK_PORT/realms/$realm
    echo $idp_entity_id > /mnt/state/demo-$app_id-idp-entity-id
    sp_entity_id=$client_id
    echo $sp_entity_id > /mnt/state/demo-$app_id-sp-entity-id

    id=$(kcadm.sh get --config $config -r $realm \
      clients |& \
      jq -r --arg clientId $client_id \
        '.[] | select(.clientId == $clientId) | .id')
    [ -n "$id" ]

    attributes=$(mktemp)
    kcadm.sh get --config $config -r $realm clients/$id |& \
      jq '.attributes' > $attributes
    sp_signing_cert=$(cat $attributes | jq -r '."saml.signing.certificate"')
    sp_signing_key=$(cat $attributes | jq -r '."saml.signing.private.key"')
    [ $sp_signing_cert != null ]
    [ $sp_signing_key != null ]
    write_pem_cert $sp_signing_cert /mnt/state/demo-$app_id-sp-signing-cert.pem \
      644
    write_pem_key $sp_signing_key /mnt/state/demo-$app_id-sp-signing-key.pem \
      644
    [ $(cat $attributes | jq 'has("saml.encrypt")') = false ]
    rm $attributes
    ;;
  *)
    echo "unsupported app_id: $app_id"
    exit 1
  esac
}

write_pem_cert() {
  [ $# -eq 3 ]
  cert=$1
  filename=$2
  mode=$3

  echo "-----BEGIN CERTIFICATE-----" > $filename
  chmod $mode $filename
  echo $cert >> $filename
  echo "-----END CERTIFICATE-----" >> $filename
}

write_pem_key() {
  [ $# -eq 3 ]
  key=$1
  filename=$2
  mode=$3

  echo "-----BEGIN RSA PRIVATE KEY-----" > $filename
  chmod $mode $filename
  echo $key >> $filename
  echo "-----END RSA PRIVATE KEY-----" >> $filename
}

# create realms, etc., if necessary

app_ids=($APP_IDS)
realm_ids=($REALM_IDS)
[ ${#app_ids[@]} -eq ${#realm_ids[@]} ]

for index in "${!app_ids[@]}"; do
  app_id=${app_ids[$index]}
  realm_id=${realm_ids[$index]}
  [ -n "$app_id" ]
  [ -n "$realm_id" ]

  realm=$(factory realm $realm_id)
  client_id=$(factory client_id $app_id)
  [ -n "$realm" ]
  [ -n "$client_id" ]

  if kcadm.sh get realms/$realm --config $config &> /dev/null; then
    echo "realm $realm already exists"
    continue
  fi

  echo "creating realm $realm"
  display_name="$(factory display_name $app_id)"
  [ -n "$display_name" ]
  kcadm.sh create realms --config $config \
    -s realm=$realm \
    -s "displayName=$display_name" \
    -s enabled=true

  # configure email

  kcadm.sh update --config $config realms/$realm \
    -s 'smtpServer={"auth":false,"from":"'$KEYCLOAK_EMAIL'","host":"'$SMTP_SERVER'"}'
  id=$(kcadm.sh get --config $config -r master users |& \
      jq -r '.[] | select(.username == "admin") | .id')
  [ -n "$id" ]
  kcadm.sh update --config $config -r master /users/$id \
    -s email=$KEYCLOAK_EMAIL \
    -s emailVerified=true

  # allow user self-service, if applicable

  if [ -z "$ldap_url" ]; then
    kcadm.sh update --config $config realms/$realm \
      -s resetPasswordAllowed=true \
      -s registrationAllowed=true \
      -s verifyEmail=true
  fi

  flow=$(factory flow $app_id)
  case $flow in
  oidc-passkey-1fa)
    required_action=webauthn-register-passwordless

    subflow_1=$flow-subflow-1
    subflow_2=$flow-subflow-2
    subflow_3=$flow-subflow-3
    subflow_4=$flow-subflow-4

    echo "creating flow $flow"
    createFlow $realm $flow

    echo "creating execution auth-cookie in $flow"
    createExecution $realm $flow auth-cookie ALTERNATIVE
    echo "creating subflow $subflow_1 in $flow"
    createSubflow $realm $flow $subflow_1 ALTERNATIVE
    echo "creating execution auth-username-form in $subflow_1"
    createExecution $realm $subflow_1 auth-username-form REQUIRED
    echo "creating subflow $subflow_2 in $subflow_1"
    createSubflow $realm $subflow_1 $subflow_2 REQUIRED
    echo "creating execution webauthn-authenticator-passwordless in " $subflow_2
    createExecution $realm $subflow_2 webauthn-authenticator-passwordless \
      ALTERNATIVE
    echo "creating subflow $subflow_3 in $subflow_2"
    createSubflow $realm $subflow_2 $subflow_3 ALTERNATIVE
    echo "creating execution auth-password-form in $subflow_3"
    createExecution $realm $subflow_3 auth-password-form REQUIRED
    echo "creating subflow $subflow_4 in $subflow_3"
    createSubflow $realm $subflow_3 $subflow_4 CONDITIONAL
    echo "creating execution conditional-user-configured in $subflow_4"
    createExecution $realm $subflow_4 conditional-user-configured REQUIRED
    echo "creating execution webauthn-authenticator in $subflow_4"
    createExecution $realm $subflow_4 webauthn-authenticator ALTERNATIVE
    ;;
  oidc-passkey-2fa)
    required_action=webauthn-register

    subflow_1=$flow-subflow-1

    echo "creating flow $flow"
    createFlow $realm $flow

    echo "creating execution auth-cookie in $flow"
    createExecution $realm $flow auth-cookie ALTERNATIVE
    echo "creating subflow $subflow_1 in $flow"
    createSubflow $realm $flow $subflow_1 ALTERNATIVE
    echo "creating execution auth-username-password-form in $subflow_1"
    createExecution $realm $subflow_1 auth-username-password-form REQUIRED
    echo "creating execution webauthn-authenticator in $subflow_1"
    createExecution $realm $subflow_1 webauthn-authenticator REQUIRED
    ;;
  *)
    echo "unsupported flow: $flow"
    exit 1
  esac

  protocol=$(factory protocol $app_id)
  redirect_uri=$(factory redirect_uri $app_id)
  [ -n "$redirect_uri" ]
  case $protocol in
  oidc)
    post_logout_redirect_uri=$(factory post_logout_redirect_uri $app_id)
    [ -n "$post_logout_redirect_uri" ]

    echo "creating OIDC client $client_id"
    kcadm.sh create clients --config $config -r $realm \
      -s clientId=$client_id \
      -s protocol=openid-connect \
      -s directAccessGrantsEnabled=false \
      -s publicClient=false \
      -s 'redirectUris=["'$redirect_uri'"]' \
      -s 'attributes={"post.logout.redirect.uris":"'$post_logout_redirect_uri'"}' \
      -s standardFlowEnabled=true \
      -s enabled=true

    vsphere_domain=$(factory vsphere_domain $app_id)
    if [ -n "$vsphere_domain" ]; then
      echo "prepare client for vSphere: $client_id"

      id=$(kcadm.sh get --config $config -r $realm clients |& \
        jq -r --arg clientId $client_id \
          '.[] | select(.clientId == $clientId) | .id')
      [ -n "$id" ]
      kcadm.sh update --config $config -r $realm clients/$id \
        -s clientId=$client_id \
        -s standardFlowEnabled=true \
        -s implicitFlowEnabled=false \
        -s directAccessGrantsEnabled=false \
        -s serviceAccountsEnabled=true \
        -s publicClient=false

      kcadm.sh add-roles --config $config -r $realm \
        --uusername service-account-$client_id \
	--cclientid realm-management \
        --rolename view-users

      for model_id in $(kcadm.sh get --config $config -r $realm \
        clients/$id/protocol-mappers/models | jq -r '.[] | .id'); do
        kcadm.sh delete --config $config -r $realm \
          clients/$id/protocol-mappers/models/$model_id
      done

      kcadm.sh create --config $config -r $realm \
        clients/$id/protocol-mappers/add-models -f - << EOF
[
  {
    "name" : "sub",
    "protocol" : "openid-connect",
    "protocolMapper" : "oidc-usermodel-property-mapper",
    "config" : {
      "claim.name" : "sub",
      "user.attribute" : "username",
      "id.token.claim" : "true",
      "access.token.claim" : "true",
      "userinfo.token.claim" : "true"
    }
  },
  {
    "name" : "upn",
    "protocol" : "openid-connect",
    "protocolMapper" : "oidc-usermodel-property-with-suffix-mapper",
    "config" : {
      "claim.name" : "upn",
      "user.attribute" : "username",
      "suffix": "@$vsphere_domain",
      "id.token.claim" : "true",
      "access.token.claim" : "true",
      "userinfo.token.claim" : "true"
    }
  },
  {
    "name" : "group",
    "protocol" : "openid-connect",
    "protocolMapper" : "oidc-group-membership-with-suffix-mapper",
    "config" : {
      "claim.name" : "group",
      "suffix": "@$vsphere_domain",
      "id.token.claim" : "true",
      "access.token.claim" : "true",
      "userinfo.token.claim" : "true"
    }
  }
]
EOF
    fi
    ;;
  saml)
    saml_assertion_consumer_url_redirect="https://$APACHE_HOSTNAME:$((9443 + $app_id))"
    saml_single_logout_service_url_redirect="https://$APACHE_HOSTNAME:$((9443 + $app_id))/Shibboleth.sso/SLO/Redirect"

    echo "creating SAML client $client_id"
    kcadm.sh create clients --config $config -r $realm \
      -s clientId=$client_id \
      -s protocol=saml \
      -s 'redirectUris=["'$redirect_uri'"]' \
      -s 'attributes={"saml_assertion_consumer_url_redirect":"'$saml_assertion_consumer_url_redirect'","saml_single_logout_service_url_redirect":"'$saml_single_logout_service_url_redirect'"}' \
      -s enabled=true

    echo "creating protocol mapper for givenName"
    id=$(kcadm.sh get --config $config -r $realm \
      clients |& \
        jq -r --arg clientId $client_id \
          '.[] | select(.clientId == $clientId) | .id')
    kcadm.sh create clients/$id/protocol-mappers/models \
      --config $config -r $realm \
      -s 'name="X500 givenName"' \
      -s protocol=saml \
      -s protocolMapper=saml-user-property-mapper \
      -s 'config={"attribute.nameformat":"urn:oasis:names:tc:SAML:2.0:attrname-format:uri","user.attribute":"firstName","friendly.name":"givenName","attribute.name":"urn:oid:2.5.4.42"}'
    ;;
  *)
    echo "unsupported protocol: $protocol"
    exit 1
  esac

  echo "enabling required action by default: $required_action"
  kcadm.sh update --config $config -r $realm \
    authentication/required-actions/$required_action \
    -s defaultAction=true

  echo "binding flow $flow to client $client_id's browser flow"
  flow_id=$(kcadm.sh get --config $config -r $realm \
    authentication/flows |& \
    jq -r --arg flow $flow \
      '.[] | select(.alias == $flow) | .id')
  [ -n "$flow_id" ]
  id=$(kcadm.sh get --config $config -r $realm \
    clients |& \
    jq -r --arg clientId $client_id \
      '.[] | select(.clientId == $clientId) | .id')
  [ -n "$id" ]
  kcadm.sh update --config $config -r $realm clients/$id \
    -s 'authenticationFlowBindingOverrides={"browser":"'$flow_id'"}'

  ldap_url=$(factory ldap_url $app_id)
  if [ -n "$ldap_url" ]; then
    echo "creating LDAP user storage provider"
    kcadm.sh create components --config $config -r $realm \
      -s providerType=org.keycloak.storage.UserStorageProvider \
      -s providerId=ldap \
      -s name="LDAP Test Server" \
      -s 'config.vendor=["other"]' \
      -s 'config.connectionUrl=["'$ldap_url'"]' \
      -s 'config.startTls=["false"]' \
      -s 'config.authType=["simple"]' \
      -s 'config.bindDn=["cn=read-only-admin,dc=example,dc=com"]' \
      -s 'config.bindCredential=["password"]' \
      -s 'config.editMode=["READ_ONLY"]' \
      -s 'config.usersDn=["dc=example,dc=com"]' \
      -s 'config.usernameLDAPAttribute=["uid"]' \
      -s 'config.rdnLDAPAttribute=["uid"]' \
      -s 'config.uuidLDAPAttribute=["entryUUID"]' \
      -s 'config.userObjectClasses=["inetOrgPerson"]' \
      -s 'config.syncRegistrations=["false"]' \
      -s 'config.trustEmail=["true"]' \
      -s 'config.enabled=["true"]'

    case $app_id in
    1|2|6)
      ;;
    3|4)
      echo "deleting LDAP mapper of type user-attribute-ldap-mapper"
      id=$(kcadm.sh get --config $config -r $realm components | \
        jq -r '.[] | select(.providerType=="org.keycloak.storage.ldap.mappers.LDAPStorageMapper" and .providerId=="user-attribute-ldap-mapper" and .name=="first name") | .id')
      [ -n "$id" ]
      kcadm.sh delete --config $config -r $realm components/$id

      echo "creating LDAP mapper of type full-name-ldap-mapper"
      id=$(kcadm.sh get --config $config -r $realm components |& \
        jq -r '.[] | select(.providerType=="org.keycloak.storage.UserStorageProvider" and .providerId=="ldap" and .name=="LDAP Test Server") | .id')
      [ -n "$id" ]
      kcadm.sh create --config $config -r $realm components \
        -s providerType=org.keycloak.storage.ldap.mappers.LDAPStorageMapper \
        -s providerId=full-name-ldap-mapper \
        -s parentId=$id \
        -s name="full name" \
        -s 'config={"read.only":["true"],"write.only":["false"],"ldap.full.name.attribute":["cn"]}'
    ;;
    *)
      echo "unsupported app_id: $app_id"
      exit 1
    esac
  fi

  echo "allow read-only access to realm admin console"
  kcadm.sh add-roles --config $config -r $realm \
    --rname default-roles-$realm \
    --cclientid realm-management \
    --rolename view-realm --rolename view-clients
done

# handle clients.hook

if [ -s "/mnt/clients.hook" ]; then
  for realm in $(jq -r 'keys | .[]' /mnt/clients.hook); do
    for client_id in $(jq -r --arg realm $realm -r '.[$realm] | keys | .[]' \
      /mnt/clients.hook); do
      protocol=$(jq -r --arg realm $realm --arg client_id $client_id \
        '.[$realm][$client_id].protocol' /mnt/clients.hook)
      public_client=$(jq -r --arg realm $realm --arg client_id $client_id \
        '.[$realm][$client_id].public_client' /mnt/clients.hook)
      secret=$(jq -r --arg realm $realm --arg client_id $client_id \
        '.[$realm][$client_id].secret' /mnt/clients.hook)
      [ "$public_client" = false ]
      [ -n "$secret" ]

      id=$(kcadm.sh get --config $config -r $realm clients |& \
        jq -r --arg clientId $client_id \
          '.[] | select(.clientId == $clientId) | .id')
      if [ -z "$id" ]; then
        continue
      fi

      case "$protocol" in
      openid-connect)
        echo "restoring secret for $protocol client $client_id in realm $realm"
        kcadm.sh update --config $config -r $realm clients/$id \
          -s "secret=$secret"
        ;;
      saml)
        saml_signing_certificate=$(jq -r \
          --arg realm $realm --arg clientId $client_id \
          '.[$realm][$clientId].saml_signing_certificate' /mnt/clients.hook)
        saml_signing_private_key=$(jq -r \
          --arg realm $realm --arg clientId $client_id -r \
          '.[$realm][$clientId].saml_signing_private_key' /mnt/clients.hook)
        [ -n "$saml_signing_certificate" ]
        [ -n "$saml_signing_private_key" ]

        echo "restoring secret, saml.signing.certificate, saml.signing.private.key for $protocol client $client_id in realm $realm"
        kcadm.sh update --config $config -r $realm clients/$id \
          -s "secret=$secret" \
          -s 'attributes={"saml.signing.certificate":"'$saml_signing_certificate'","saml.signing.private.key":"'$saml_signing_private_key'"}'
        ;;
      *)
        exit 1
      esac
    done
  done
fi

# store secrets, etc., into state
#
for index in "${!app_ids[@]}"; do
  app_id=${app_ids[$index]}
  realm_id=${realm_ids[$index]}
  [ -n "$app_id" ]
  [ -n "$realm_id" ]

  realm=$(factory realm $realm_id)
  client_id=$(factory client_id $app_id)
  [ -n "$realm" ]
  [ -n "$client_id" ]

  if [[ $app_id =~ ^[0-9]+$ ]]; then
    store_client_secrets $app_id $realm $client_id
    store_saml_idp_metadata $app_id $realm $client_id
  fi
done

# clean-up

kc-logout

# update state

set_state KEYCLOAK_READY /mnt/state/state.keycloak

# resume Keycloak in the foreground (as in original entrypoint)

wait
