#!/bin/bash
set -e

cd $(dirname $0)/..

podman exec -i keycloak-keycloak bash << EOF
kc-login 2> /dev/null
config=/var/run/keycloak/kcadm.config
PATH=\$PATH:/opt/keycloak/bin

save=\$(mktemp)
echo "{}" > \$save
for realm in \$(kcadm.sh get --config \$config realms 2> /dev/null | \
  jq -r '.[] | .realm'); do

  save_tmp=\$(mktemp)
  jq --arg realm \$realm '.[\$realm] = {}' \$save > \$save_tmp
  mv \$save_tmp \$save

  clients=\$(mktemp)
  kcadm.sh get --config \$config -r \$realm clients 2> /dev/null > \$clients

  for client_id in \$(jq -r '.[] | .clientId' \$clients); do

    protocol=\$(jq -r --arg clientId \$client_id \
      '.[] | select(.clientId == \$clientId) | \
      .protocol // "openid-connect"' \$clients)
    secret=\$(jq -r --arg clientId \$client_id \
      '.[] | select(.clientId == \$clientId) | \
      .secret // ""' \$clients)
 
    case \$protocol in
    openid-connect)
      bearer_only=\$(jq -r --arg clientId \$client_id \
        '.[] | select(.clientId == \$clientId) | \
        .bearerOnly' \$clients)
      public_client=\$(jq -r --arg clientId \$client_id \
        '.[] | select(.clientId == \$clientId) | \
        .publicClient' \$clients)

      if [ \$public_client = true ]; then
        [ -z "\$secret" ]
        continue
      elif [ \$bearer_only = true ]; then
        [ -z "\$secret" ]
        continue
      fi
      [ -n "\secret" ]

      save_tmp=\$(mktemp)
      jq \
        --arg realm \$realm --arg clientId \$client_id \
        --arg protocol \$protocol \
        --arg secret "\$secret" \
        --arg public_client \$public_client \
        '.[\$realm][\$clientId] = { \
          "protocol":\$protocol, \
          "public_client": \$public_client, \
          "secret":\$secret \
        }' \$save > \$save_tmp
      mv \$save_tmp \$save
      ;;
    saml)
      [ "\$public_client" = false ]
      [ -n "\$secret" ]

      saml_signing_certificate=\$(jq -r --arg clientId \$client_id \
        '.[] | select(.clientId == \$clientId) | \
	.attributes."saml.signing.certificate"' \$clients)
      saml_signing_private_key=\$(jq -r --arg clientId \$client_id \
        '.[] | select(.clientId == \$clientId) | \
	.attributes."saml.signing.private.key"' \$clients)

      [ -n "\$saml_signing_certificate" ]
      [ -n "\$saml_signing_private_key" ]

      save_tmp=\$(mktemp)
      jq \
        --arg realm \$realm --arg clientId \$client_id \
        --arg protocol \$protocol \
        --arg public_client \$public_client \
        --arg secret \$secret \
        --arg saml_signing_certificate \$saml_signing_certificate \
        --arg saml_signing_private_key \$saml_signing_private_key \
        '.[\$realm][\$clientId] = { \
          "protocol":\$protocol, \
          "public_client": \$public_client, \
          "secret":\$secret, \
          "saml_signing_certificate":\$saml_signing_certificate, \
          "saml_signing_private_key":\$saml_signing_private_key \
        }' \$save > \$save_tmp
      mv \$save_tmp \$save
      ;;
    esac
  done
  rm \$clients
done
jq --sort-keys . \$save
EOF
